// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mps is a generated GoMock package.
package mps

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "github.com/pavelkrolevets/MIR-pro/common"
	state "github.com/pavelkrolevets/MIR-pro/core/state"
	types "github.com/pavelkrolevets/MIR-pro/core/types"
	trie "github.com/pavelkrolevets/MIR-pro/trie"
	"github.com/pavelkrolevets/MIR-pro/crypto"
)

// MockPrivateStateManager is a mock of PrivateStateManager interface.
type MockPrivateStateManager [P crypto.PublicKey] struct {
	ctrl     *gomock.Controller
	recorder *MockPrivateStateManagerMockRecorder[P]
}

// MockPrivateStateManagerMockRecorder is the mock recorder for MockPrivateStateManager.
type MockPrivateStateManagerMockRecorder [P crypto.PublicKey] struct {
	mock *MockPrivateStateManager[P]
}

// NewMockPrivateStateManager creates a new mock instance.
func NewMockPrivateStateManager[P crypto.PublicKey](ctrl *gomock.Controller) *MockPrivateStateManager[P] {
	mock := &MockPrivateStateManager[P]{ctrl: ctrl}
	mock.recorder = &MockPrivateStateManagerMockRecorder[P]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrivateStateManager[P]) EXPECT() *MockPrivateStateManagerMockRecorder[P] {
	return m.recorder
}

// CheckAt mocks base method.
func (m *MockPrivateStateManager[P]) CheckAt(blockHash common.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAt", blockHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckAt indicates an expected call of CheckAt.
func (mr *MockPrivateStateManagerMockRecorder[P]) CheckAt(blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAt", reflect.TypeOf((*MockPrivateStateManager[P])(nil).CheckAt), blockHash)
}

// NotIncludeAny mocks base method.
func (m *MockPrivateStateManager[P]) NotIncludeAny(psm *PrivateStateMetadata, managedParties ...string) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{psm}
	for _, a := range managedParties {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NotIncludeAny", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// NotIncludeAny indicates an expected call of NotIncludeAny.
func (mr *MockPrivateStateManagerMockRecorder[P]) NotIncludeAny(psm interface{}, managedParties ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{psm}, managedParties...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotIncludeAny", reflect.TypeOf((*MockPrivateStateManager[P])(nil).NotIncludeAny), varargs...)
}

// PSIs mocks base method.
func (m *MockPrivateStateManager[P]) PSIs() []types.PrivateStateIdentifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PSIs")
	ret0, _ := ret[0].([]types.PrivateStateIdentifier)
	return ret0
}

// PSIs indicates an expected call of PSIs.
func (mr *MockPrivateStateManagerMockRecorder[P]) PSIs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PSIs", reflect.TypeOf((*MockPrivateStateManager[P])(nil).PSIs))
}

// ResolveForManagedParty mocks base method.
func (m *MockPrivateStateManager[P]) ResolveForManagedParty(managedParty string) (*PrivateStateMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveForManagedParty", managedParty)
	ret0, _ := ret[0].(*PrivateStateMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveForManagedParty indicates an expected call of ResolveForManagedParty.
func (mr *MockPrivateStateManagerMockRecorder[P]) ResolveForManagedParty(managedParty interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveForManagedParty", reflect.TypeOf((*MockPrivateStateManager[P])(nil).ResolveForManagedParty), managedParty)
}

// ResolveForUserContext mocks base method.
func (m *MockPrivateStateManager[P]) ResolveForUserContext(ctx context.Context) (*PrivateStateMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveForUserContext", ctx)
	ret0, _ := ret[0].(*PrivateStateMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveForUserContext indicates an expected call of ResolveForUserContext.
func (mr *MockPrivateStateManagerMockRecorder[P]) ResolveForUserContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveForUserContext", reflect.TypeOf((*MockPrivateStateManager[P])(nil).ResolveForUserContext), ctx)
}

// StateRepository mocks base method.
func (m *MockPrivateStateManager[P]) StateRepository(blockHash common.Hash) (PrivateStateRepository[P], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateRepository", blockHash)
	ret0, _ := ret[0].(PrivateStateRepository[P])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateRepository indicates an expected call of StateRepository.
func (mr *MockPrivateStateManagerMockRecorder[P]) StateRepository(blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateRepository", reflect.TypeOf((*MockPrivateStateManager[P])(nil).StateRepository), blockHash)
}

// TrieDB mocks base method.
func (m *MockPrivateStateManager[P]) TrieDB() *trie.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrieDB")
	ret0, _ := ret[0].(*trie.Database)
	return ret0
}

// TrieDB indicates an expected call of TrieDB.
func (mr *MockPrivateStateManagerMockRecorder[P]) TrieDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrieDB", reflect.TypeOf((*MockPrivateStateManager[P])(nil).TrieDB))
}

// MockPrivateStateMetadataResolver is a mock of PrivateStateMetadataResolver interface.
type MockPrivateStateMetadataResolver struct {
	ctrl     *gomock.Controller
	recorder *MockPrivateStateMetadataResolverMockRecorder
}

// MockPrivateStateMetadataResolverMockRecorder is the mock recorder for MockPrivateStateMetadataResolver.
type MockPrivateStateMetadataResolverMockRecorder struct {
	mock *MockPrivateStateMetadataResolver
}

// NewMockPrivateStateMetadataResolver creates a new mock instance.
func NewMockPrivateStateMetadataResolver(ctrl *gomock.Controller) *MockPrivateStateMetadataResolver {
	mock := &MockPrivateStateMetadataResolver{ctrl: ctrl}
	mock.recorder = &MockPrivateStateMetadataResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrivateStateMetadataResolver) EXPECT() *MockPrivateStateMetadataResolverMockRecorder {
	return m.recorder
}

// NotIncludeAny mocks base method.
func (m *MockPrivateStateMetadataResolver) NotIncludeAny(psm *PrivateStateMetadata, managedParties ...string) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{psm}
	for _, a := range managedParties {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NotIncludeAny", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// NotIncludeAny indicates an expected call of NotIncludeAny.
func (mr *MockPrivateStateMetadataResolverMockRecorder) NotIncludeAny(psm interface{}, managedParties ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{psm}, managedParties...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotIncludeAny", reflect.TypeOf((*MockPrivateStateMetadataResolver)(nil).NotIncludeAny), varargs...)
}

// PSIs mocks base method.
func (m *MockPrivateStateMetadataResolver) PSIs() []types.PrivateStateIdentifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PSIs")
	ret0, _ := ret[0].([]types.PrivateStateIdentifier)
	return ret0
}

// PSIs indicates an expected call of PSIs.
func (mr *MockPrivateStateMetadataResolverMockRecorder) PSIs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PSIs", reflect.TypeOf((*MockPrivateStateMetadataResolver)(nil).PSIs))
}

// ResolveForManagedParty mocks base method.
func (m *MockPrivateStateMetadataResolver) ResolveForManagedParty(managedParty string) (*PrivateStateMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveForManagedParty", managedParty)
	ret0, _ := ret[0].(*PrivateStateMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveForManagedParty indicates an expected call of ResolveForManagedParty.
func (mr *MockPrivateStateMetadataResolverMockRecorder) ResolveForManagedParty(managedParty interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveForManagedParty", reflect.TypeOf((*MockPrivateStateMetadataResolver)(nil).ResolveForManagedParty), managedParty)
}

// ResolveForUserContext mocks base method.
func (m *MockPrivateStateMetadataResolver) ResolveForUserContext(ctx context.Context) (*PrivateStateMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveForUserContext", ctx)
	ret0, _ := ret[0].(*PrivateStateMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveForUserContext indicates an expected call of ResolveForUserContext.
func (mr *MockPrivateStateMetadataResolverMockRecorder) ResolveForUserContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveForUserContext", reflect.TypeOf((*MockPrivateStateMetadataResolver)(nil).ResolveForUserContext), ctx)
}

// MockPrivateStateRepository is a mock of PrivateStateRepository interface.
type MockPrivateStateRepository [P crypto.PublicKey]struct {
	ctrl     *gomock.Controller
	recorder *MockPrivateStateRepositoryMockRecorder[P]
}

// MockPrivateStateRepositoryMockRecorder is the mock recorder for MockPrivateStateRepository.
type MockPrivateStateRepositoryMockRecorder [P crypto.PublicKey] struct {
	mock *MockPrivateStateRepository[P]
}

// NewMockPrivateStateRepository creates a new mock instance.
func NewMockPrivateStateRepository[P crypto.PublicKey](ctrl *gomock.Controller) *MockPrivateStateRepository[P] {
	mock := &MockPrivateStateRepository[P]{ctrl: ctrl}
	mock.recorder = &MockPrivateStateRepositoryMockRecorder[P]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrivateStateRepository[P]) EXPECT() *MockPrivateStateRepositoryMockRecorder[P] {
	return m.recorder
}

// Commit mocks base method.
func (m *MockPrivateStateRepository[P]) Commit(isEIP158 bool, block *types.Block[P]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", isEIP158, block)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockPrivateStateRepositoryMockRecorder[P]) Commit(isEIP158, block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockPrivateStateRepository[P])(nil).Commit), isEIP158, block)
}

// CommitAndWrite mocks base method.
func (m *MockPrivateStateRepository[P]) CommitAndWrite(isEIP158 bool, block *types.Block[P]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitAndWrite", isEIP158, block)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitAndWrite indicates an expected call of CommitAndWrite.
func (mr *MockPrivateStateRepositoryMockRecorder[P]) CommitAndWrite(isEIP158, block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitAndWrite", reflect.TypeOf((*MockPrivateStateRepository[P])(nil).CommitAndWrite), isEIP158, block)
}

// Copy mocks base method.
func (m *MockPrivateStateRepository[P]) Copy() PrivateStateRepository[P] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(PrivateStateRepository[P])
	return ret0
}

// Copy indicates an expected call of Copy.
func (mr *MockPrivateStateRepositoryMockRecorder[P]) Copy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockPrivateStateRepository[P])(nil).Copy))
}

// DefaultState mocks base method.
func (m *MockPrivateStateRepository[P]) DefaultState() (*state.StateDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultState")
	ret0, _ := ret[0].(*state.StateDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DefaultState indicates an expected call of DefaultState.
func (mr *MockPrivateStateRepositoryMockRecorder[P]) DefaultState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultState", reflect.TypeOf((*MockPrivateStateRepository[P])(nil).DefaultState))
}

// DefaultStateMetadata mocks base method.
func (m *MockPrivateStateRepository[P]) DefaultStateMetadata() *PrivateStateMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultStateMetadata")
	ret0, _ := ret[0].(*PrivateStateMetadata)
	return ret0
}

// DefaultStateMetadata indicates an expected call of DefaultStateMetadata.
func (mr *MockPrivateStateRepositoryMockRecorder[P]) DefaultStateMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultStateMetadata", reflect.TypeOf((*MockPrivateStateRepository[P])(nil).DefaultStateMetadata))
}

// IsMPS mocks base method.
func (m *MockPrivateStateRepository[P]) IsMPS() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMPS")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMPS indicates an expected call of IsMPS.
func (mr *MockPrivateStateRepositoryMockRecorder[P]) IsMPS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMPS", reflect.TypeOf((*MockPrivateStateRepository[P])(nil).IsMPS))
}

// MergeReceipts mocks base method.
func (m *MockPrivateStateRepository[P]) MergeReceipts(pub, priv types.Receipts[P]) types.Receipts[P] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeReceipts", pub, priv)
	ret0, _ := ret[0].(types.Receipts[P])
	return ret0
}

// MergeReceipts indicates an expected call of MergeReceipts.
func (mr *MockPrivateStateRepositoryMockRecorder[P]) MergeReceipts(pub, priv interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeReceipts", reflect.TypeOf((*MockPrivateStateRepository[P])(nil).MergeReceipts), pub, priv)
}

// PrivateStateRoot mocks base method.
func (m *MockPrivateStateRepository[P]) PrivateStateRoot(psi types.PrivateStateIdentifier) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateStateRoot", psi)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivateStateRoot indicates an expected call of PrivateStateRoot.
func (mr *MockPrivateStateRepositoryMockRecorder[P]) PrivateStateRoot(psi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateStateRoot", reflect.TypeOf((*MockPrivateStateRepository[P])(nil).PrivateStateRoot), psi)
}

// Reset mocks base method.
func (m *MockPrivateStateRepository[P]) Reset() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockPrivateStateRepositoryMockRecorder[P]) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockPrivateStateRepository[P])(nil).Reset))
}

// StatePSI mocks base method.
func (m *MockPrivateStateRepository[P]) StatePSI(psi types.PrivateStateIdentifier) (*state.StateDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatePSI", psi)
	ret0, _ := ret[0].(*state.StateDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatePSI indicates an expected call of StatePSI.
func (mr *MockPrivateStateRepositoryMockRecorder[P]) StatePSI(psi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatePSI", reflect.TypeOf((*MockPrivateStateRepository[P])(nil).StatePSI), psi)
}
