// Code generated by MockGen. DO NOT EDIT.
// Source: ./proto/qlight-token-manager_grpc.pb.go

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	proto "github.com/ConsenSys/quorum-qlight-token-manager-plugin-sdk-go/proto"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPluginQLightTokenRefresherClient is a mock of PluginQLightTokenRefresherClient interface.
type MockPluginQLightTokenRefresherClient struct {
	ctrl     *gomock.Controller
	recorder *MockPluginQLightTokenRefresherClientMockRecorder
}

// MockPluginQLightTokenRefresherClientMockRecorder is the mock recorder for MockPluginQLightTokenRefresherClient.
type MockPluginQLightTokenRefresherClientMockRecorder struct {
	mock *MockPluginQLightTokenRefresherClient
}

// NewMockPluginQLightTokenRefresherClient creates a new mock instance.
func NewMockPluginQLightTokenRefresherClient(ctrl *gomock.Controller) *MockPluginQLightTokenRefresherClient {
	mock := &MockPluginQLightTokenRefresherClient{ctrl: ctrl}
	mock.recorder = &MockPluginQLightTokenRefresherClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginQLightTokenRefresherClient) EXPECT() *MockPluginQLightTokenRefresherClientMockRecorder {
	return m.recorder
}

// PluginQLightTokenManager mocks base method.
func (m *MockPluginQLightTokenRefresherClient) PluginQLightTokenManager(ctx context.Context, in *proto.PluginQLightTokenManager_Request, opts ...grpc.CallOption) (*proto.PluginQLightTokenManager_Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PluginQLightTokenManager", varargs...)
	ret0, _ := ret[0].(*proto.PluginQLightTokenManager_Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginQLightTokenManager indicates an expected call of PluginQLightTokenManager.
func (mr *MockPluginQLightTokenRefresherClientMockRecorder) PluginQLightTokenManager(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginQLightTokenManager", reflect.TypeOf((*MockPluginQLightTokenRefresherClient)(nil).PluginQLightTokenManager), varargs...)
}

// TokenRefresh mocks base method.
func (m *MockPluginQLightTokenRefresherClient) TokenRefresh(ctx context.Context, in *proto.TokenRefresh_Request, opts ...grpc.CallOption) (*proto.TokenRefresh_Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TokenRefresh", varargs...)
	ret0, _ := ret[0].(*proto.TokenRefresh_Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenRefresh indicates an expected call of TokenRefresh.
func (mr *MockPluginQLightTokenRefresherClientMockRecorder) TokenRefresh(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenRefresh", reflect.TypeOf((*MockPluginQLightTokenRefresherClient)(nil).TokenRefresh), varargs...)
}

// MockPluginQLightTokenRefresherServer is a mock of PluginQLightTokenRefresherServer interface.
type MockPluginQLightTokenRefresherServer struct {
	ctrl     *gomock.Controller
	recorder *MockPluginQLightTokenRefresherServerMockRecorder
}

// MockPluginQLightTokenRefresherServerMockRecorder is the mock recorder for MockPluginQLightTokenRefresherServer.
type MockPluginQLightTokenRefresherServerMockRecorder struct {
	mock *MockPluginQLightTokenRefresherServer
}

// NewMockPluginQLightTokenRefresherServer creates a new mock instance.
func NewMockPluginQLightTokenRefresherServer(ctrl *gomock.Controller) *MockPluginQLightTokenRefresherServer {
	mock := &MockPluginQLightTokenRefresherServer{ctrl: ctrl}
	mock.recorder = &MockPluginQLightTokenRefresherServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginQLightTokenRefresherServer) EXPECT() *MockPluginQLightTokenRefresherServerMockRecorder {
	return m.recorder
}

// PluginQLightTokenManager mocks base method.
func (m *MockPluginQLightTokenRefresherServer) PluginQLightTokenManager(arg0 context.Context, arg1 *proto.PluginQLightTokenManager_Request) (*proto.PluginQLightTokenManager_Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginQLightTokenManager", arg0, arg1)
	ret0, _ := ret[0].(*proto.PluginQLightTokenManager_Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginQLightTokenManager indicates an expected call of PluginQLightTokenManager.
func (mr *MockPluginQLightTokenRefresherServerMockRecorder) PluginQLightTokenManager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginQLightTokenManager", reflect.TypeOf((*MockPluginQLightTokenRefresherServer)(nil).PluginQLightTokenManager), arg0, arg1)
}

// TokenRefresh mocks base method.
func (m *MockPluginQLightTokenRefresherServer) TokenRefresh(arg0 context.Context, arg1 *proto.TokenRefresh_Request) (*proto.TokenRefresh_Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenRefresh", arg0, arg1)
	ret0, _ := ret[0].(*proto.TokenRefresh_Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenRefresh indicates an expected call of TokenRefresh.
func (mr *MockPluginQLightTokenRefresherServerMockRecorder) TokenRefresh(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenRefresh", reflect.TypeOf((*MockPluginQLightTokenRefresherServer)(nil).TokenRefresh), arg0, arg1)
}

// mustEmbedUnimplementedPluginQLightTokenRefresherServer mocks base method.
func (m *MockPluginQLightTokenRefresherServer) mustEmbedUnimplementedPluginQLightTokenRefresherServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPluginQLightTokenRefresherServer")
}

// mustEmbedUnimplementedPluginQLightTokenRefresherServer indicates an expected call of mustEmbedUnimplementedPluginQLightTokenRefresherServer.
func (mr *MockPluginQLightTokenRefresherServerMockRecorder) mustEmbedUnimplementedPluginQLightTokenRefresherServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPluginQLightTokenRefresherServer", reflect.TypeOf((*MockPluginQLightTokenRefresherServer)(nil).mustEmbedUnimplementedPluginQLightTokenRefresherServer))
}

// MockUnsafePluginQLightTokenRefresherServer is a mock of UnsafePluginQLightTokenRefresherServer interface.
type MockUnsafePluginQLightTokenRefresherServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePluginQLightTokenRefresherServerMockRecorder
}

// MockUnsafePluginQLightTokenRefresherServerMockRecorder is the mock recorder for MockUnsafePluginQLightTokenRefresherServer.
type MockUnsafePluginQLightTokenRefresherServerMockRecorder struct {
	mock *MockUnsafePluginQLightTokenRefresherServer
}

// NewMockUnsafePluginQLightTokenRefresherServer creates a new mock instance.
func NewMockUnsafePluginQLightTokenRefresherServer(ctrl *gomock.Controller) *MockUnsafePluginQLightTokenRefresherServer {
	mock := &MockUnsafePluginQLightTokenRefresherServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePluginQLightTokenRefresherServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePluginQLightTokenRefresherServer) EXPECT() *MockUnsafePluginQLightTokenRefresherServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPluginQLightTokenRefresherServer mocks base method.
func (m *MockUnsafePluginQLightTokenRefresherServer) mustEmbedUnimplementedPluginQLightTokenRefresherServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPluginQLightTokenRefresherServer")
}

// mustEmbedUnimplementedPluginQLightTokenRefresherServer indicates an expected call of mustEmbedUnimplementedPluginQLightTokenRefresherServer.
func (mr *MockUnsafePluginQLightTokenRefresherServerMockRecorder) mustEmbedUnimplementedPluginQLightTokenRefresherServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPluginQLightTokenRefresherServer", reflect.TypeOf((*MockUnsafePluginQLightTokenRefresherServer)(nil).mustEmbedUnimplementedPluginQLightTokenRefresherServer))
}
